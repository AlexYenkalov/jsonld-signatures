#!/usr/bin/env node
/**
 * A command line JSON-LD utility.
 *
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 * @author Manu Sporny <msporny@digitalbazaar.com>
 *
 * BSD 3-Clause License
 * Copyright (c) 2014 Digital Bazaar, Inc.
 * All rights reserved.
 */

'use strict';

var async = require('async');
var jsonld = require('jsonld')();
var jsonld = require('../lib/jsonld-signatures')(jsonld);
var path = require('path');
var program = require('commander');

// use 'request' extension to load JSON-LD
jsonld.use('request');

// Parse the string or value and return the boolean value encoded or raise an
// exception.
function boolify(value) {
  if(typeof value === 'boolean') {
    return value;
  }
  if(typeof value === 'string' && value) {
    switch(value.toLowerCase()) {
      case 'true':
      case 't':
      case '1':
      case 'yes':
      case 'y':
        return true;
      case 'false':
      case 'f':
      case '0':
      case 'no':
      case 'n':
        return false;
    }
  }
  // if here we couldn't parse it
  throw new Error('Invalid boolean:' + value);
}

// common output function
function _output(data, cmd, callback) {
  if(typeof data === 'object') {
    var output = JSON.stringify(data, null, cmd.indent);
    process.stdout.write(output);
  } else if(typeof data === 'string') {
    process.stdout.write(data.trim());
  } else {
    process.stdout.write(data);
  }
  if(cmd.newline) {
    process.stdout.write('\n');
  }
  callback();
}

// final async call to handle errors
function _final(err, results) {
  if(err) {
    if(err.stack) {
      console.log(err.stack);
    } else {
      console.log(err.toString());
    }
    if(typeof err === 'object') {
      console.log('Error:', JSON.stringify(err, null, 2));
    }
    process.exit(1);
  }
}

// check for HTTP/HTTPS URL
function _isHTTP(url) {
  return (url.indexOf('http://') === 0 || url.indexOf('https://') === 0);
}

// init common command options
function _jsigsCommand(command) {
  command
    .option('-i, --indent <spaces>', 'spaces to indent [2]', Number, 2)
    .option('-N, --no-newline', 'do not output the trailing newline [newline]')
    .option('-k, --insecure', 'allow insecure SSL connections [false]')
  return command;
}

// init common request options
function _requestOptions(command) {
  var options = {};
  if(command.insecure) {
    options.strictSSL = false;
  }
  return options;
}

// init common jsonld options
function _jsigsOptions(command, input) {
  var options = {};

  // setup base
  if(command.base) {
    // explicit base set
    options.base = command.base;
  } else if(input !== '-') {
    // only setup base if not stdin
    // use input as base if it looks like a URL
    // use a file URL otherwise
    if(_isHTTP(input)) {
      options.base = input;
    } else {
      options.base = 'file://' + path.resolve(process.cwd(), input);
    }
  }

  // setup documentLoader
  options.documentLoader = function(url, callback) {
    var reqopts = _requestOptions(command);
    jsonld.request(url, reqopts, function(err, res, data) {
      callback(err, {
        contextUrl: null,
        documentUrl: url,
        document: data || null
      });
    });
  };

  return options;
}

program
  .version(module.exports.version)
  .on('--help', function() {
    console.log();
    console.log(
      '  The input parameter for all commands can be a filename, a URL\n' +
      '  beginning with "http://" or "https://", or "-" for stdin (the\n' +
      '  default).');
    console.log();
  });;

_jsigsCommand(program.command('verify [filename|URL|-]'))
  .description('verify the digital signature in a JSON-LD document')
  .action(function(input, cmd) {
    input = input || '-';
    async.auto({
      process: function(callback, results) {
        var options = _jsigsOptions(cmd, input);
      },
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

program.parse(process.argv);
